<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.90.1">Hugo</generator><title type="html">osx on Dan Everton</title><subtitle type="html">Notes on tech and other topics</subtitle><link href="https://www.iocaine.org/tags/osx/" rel="alternate" type="text/html" title="HTML"/><link href="https://www.iocaine.org/tags/osx/feed.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2021-12-14T03:34:57+00:00</updated><id>https://www.iocaine.org/tags/osx/</id><entry><title type="html">Notes To Self - Reinstall After Rebuild on OS X</title><link href="https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/</id><published>2015-04-17T00:00:00+00:00</published><updated>2021-12-14T13:31:46+10:00</updated><content type="html"><![CDATA[<p>For various reasons I&rsquo;ve had to reinstall from scratch all the software
on my work MacBook a lot lately. These are some notes on how I get back
to usable state from a clean OS X install. I can&rsquo;t imagine this is super
useful to other people, so consider this skippable content.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="set-up-homebrew">
        Set up Homebrew
        <a data-clipboard-text="https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/#set-up-homebrew" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Set up Homebrew" href="#set-up-homebrew">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p><a class="gblog-markdown__link" href="http://brew.sh/">Homebrew</a> is a package manager that makes it
significantly easier to get software installed on OS X in a simple way.
With some extensions <a class="gblog-markdown__link" href="http://caskroom.io/">Homebrew Cask</a>, it can also
managed GUI installers. This will also install the command line complier
tools from XCode.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">ruby -e <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="k">)</span><span class="s2">&#34;</span>
xcode-select --install
brew install caskroom/cask/brew-cask
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="get-a-nicer-terminal-environment-going">
        Get a Nicer Terminal Environment Going
        <a data-clipboard-text="https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/#get-a-nicer-terminal-environment-going" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Get a Nicer Terminal Environment Going" href="#get-a-nicer-terminal-environment-going">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p>Even OS X Yosemite ships with Bash 3.2 which is a little old for my
taste. I also much prefer <a class="gblog-markdown__link" href="http://iterm2.com/">iTerm 2</a> to the built-in
Terminal application. Once those are installed we can also get our
dotfiles going by cloning from Github and using
<a class="gblog-markdown__link" href="http://endot.org/projects/dfm/">dfm</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">brew install bash
brew cask install iterm2
git clone git@github.com:deverton/dotfiles.git ~/Documents/dotfiles
<span class="nb">cd</span> ~/Documents/dotfiles
git checkout deverton
git submodule init
git submodule update
dfm install
</code></pre></div><p>To make the new Bash the default login for our user we need to tell OS X
about it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo -c <span class="s2">&#34;echo &#39;/usr/local/bin/bash&#39; &gt;&gt; /etc/shells&#34;</span>
sudo -c <span class="s2">&#34;dscl . change /users/</span><span class="nv">$USER</span><span class="s2"> UserShell /bin/bash /usr/local/bin/bash&#34;</span>
</code></pre></div><p>Now start iTerm2 and all my customisations should be back.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="manage-installed-ruby-versions-sanely">
        Manage Installed Ruby Versions Sanely
        <a data-clipboard-text="https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/#manage-installed-ruby-versions-sanely" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Manage Installed Ruby Versions Sanely" href="#manage-installed-ruby-versions-sanely">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p>In the great <a class="gblog-markdown__link" href="https://rvm.io/">RVM</a> vs <a class="gblog-markdown__link" href="https://github.com/sstephenson/rbenv">rbenv</a>
fight I&rsquo;ve come down on the side of rbenv. Homebrew makes it simple to
install.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">brew install rbenv ruby-build
rbenv install 2.2.0
</code></pre></div><p>Which gives us a Ruby 2.2.0 installation in a nice contained manner.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="and-the-rest">
        And The Rest&hellip;.
        <a data-clipboard-text="https://www.iocaine.org/post/2015-04-17-notes-to-self-reinstall-after-rebuild-on-osx/#and-the-rest" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor And The Rest&hellip;." href="#and-the-rest">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p>Install various command line tools. Some tools of noteL</p>
<ul>
<li><a class="gblog-markdown__link" href="http://stedolan.github.io/jq/">jq</a> for munging JSON on the command
line.</li>
<li>The <a class="gblog-markdown__link" href="http://geoff.greer.fm/ag/">The Silver Searcher</a> is a much
faster grep with sensible defaults and nice output.</li>
<li><a class="gblog-markdown__link" href="http://www.vim.org/">vim</a> because of course vim. The keep
an eye on <a class="gblog-markdown__link" href="http://neovim.org/">Neovim</a>.</li>
<li><a class="gblog-markdown__link" href="http://www.ivarch.com/programs/pv.shtml">pv</a> to make those long
running pipe command lines friendly.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">brew install
    awscli <span class="se">\
</span><span class="se"></span>    jq <span class="se">\
</span><span class="se"></span>    maven <span class="se">\
</span><span class="se"></span>    pv <span class="se">\
</span><span class="se"></span>    the_silver_searcher <span class="se">\
</span><span class="se"></span>    vim
</code></pre></div><p>Install various GUI apps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">brew cask install
    boot2docker <span class="se">\
</span><span class="se"></span>    chrome <span class="se">\
</span><span class="se"></span>    firefox <span class="se">\
</span><span class="se"></span>    hipchat <span class="se">\
</span><span class="se"></span>    java <span class="se">\
</span><span class="se"></span>    keepassx <span class="se">\
</span><span class="se"></span>    sourcetree <span class="se">\
</span><span class="se"></span>    vagrant <span class="se">\
</span><span class="se"></span>    virtualbox
</code></pre></div>]]></content><category scheme="https://www.iocaine.org/tags/notes" term="notes" label="notes"/><category scheme="https://www.iocaine.org/tags/osx" term="osx" label="osx"/><category scheme="https://www.iocaine.org/tags/homebrew" term="homebrew" label="homebrew"/></entry><entry><title type="html">Getting Started With Github Pages and Jekyll on OS X</title><link href="https://www.iocaine.org/post/2014-12-29-getting-started-with-github-pages-and-jekyll-on-osx/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://www.iocaine.org/post/2014-12-29-getting-started-with-github-pages-and-jekyll-on-osx/</id><published>2014-12-29T00:00:00+00:00</published><updated>2021-12-14T13:31:46+10:00</updated><content type="html"><![CDATA[<p>This isn&rsquo;t necessarily the best way but here&rsquo;s how I went about getting
<a class="gblog-markdown__link" href="http://jekyllrb.com/">Jekyll</a> going on my local machine in preparation for
using <a class="gblog-markdown__link" href="https://pages.github.com/">Github Pages</a> to server content for my
web page.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="installing-a-separate-version-of-ruby">
        Installing a Separate Version of Ruby
        <a data-clipboard-text="https://www.iocaine.org/post/2014-12-29-getting-started-with-github-pages-and-jekyll-on-osx/#installing-a-separate-version-of-ruby" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Installing a Separate Version of Ruby" href="#installing-a-separate-version-of-ruby">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p>As Jekyll requires a whole mess of Ruby Gems to get going I decided it
would be best to install a separate Ruby instance to avoid messing with
the OS X system Ruby. I&rsquo;m using Mac OS X 10.10 (Yosemite) for this and
I&rsquo;ve already got <a class="gblog-markdown__link" href="http://brew.sh/">Homebrew</a> installed which makes it
very easy to install extra tools on OS X.</p>
<p>I chose <a class="gblog-markdown__link" href="https://github.com/sstephenson/rbenv">rbenv</a> as it&rsquo;s the simplest
of the tools to manage multiple Ruby installs. It has a companion tool
called <a class="gblog-markdown__link" href="https://github.com/sstephenson/ruby-build">ruby-build</a> that can
build any version of Ruby we need. So assuming you have Homebrew installed,
getting these installed is as simple as:</p>
<pre><code>brew install rbenv ruby-build
</code></pre>
<p>Then add the following snippet somewhere your shell will read it.</p>
<pre><code>if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi
</code></pre>
<p>After relaunching your shell (or just manually executing the above
snippet in the current shell) installing a separate Ruby is as simple as</p>
<pre><code>rbenv install 2.2.0
</code></pre>
<p>I&rsquo;ve chosen to use the latest Ruby (2.2.0 at time of writing) because
why not. Once that&rsquo;s done installing you should be able to execute</p>
<pre><code>rbenv versions
</code></pre>
<p>which results in output like this:</p>
<pre><code>* system (set by /Users/deverton/.rbenv/version)
  2.2.0
</code></pre>
<p>This shows the system installed Ruby and our just installed 2.2.0
version. We can switch to that version with a quick</p>
<pre><code>rbenv global 2.2.0
</code></pre>
<p>Now the output of <code>rbenv versions</code> should look like this:</p>
<pre><code>  system (set by /Users/deverton/.rbenv/version)
* 2.2.0
</code></pre>
<div class="gblog-post__anchorwrap">
    <h2 id="installing-jekyll">
        Installing Jekyll
        <a data-clipboard-text="https://www.iocaine.org/post/2014-12-29-getting-started-with-github-pages-and-jekyll-on-osx/#installing-jekyll" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Installing Jekyll" href="#installing-jekyll">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div><p>The next step is to create somewhere for your site content to go. Rather
than document that here, follow the instructions at
<a class="gblog-markdown__link" href="https://pages.github.com/">Github</a>.</p>
<p>Now that you&rsquo;ve got a directory with your site content checked out it&rsquo;s
time to get Jekyll installed. It&rsquo;s easiest to use
<a class="gblog-markdown__link" href="http://bundler.io/">Bundler</a> to manage the install so to that end if
you do the following:</p>
<pre><code>gem install bundle
rbenv rehash
</code></pre>
<p>You&rsquo;ll have the latest Bundler installed and available on the path. You
can now create a <code>Gemfile</code> with the following contents</p>
<pre><code>source 'https://rubygems.org'
gem 'github-pages'
</code></pre>
<p>then execute</p>
<pre><code>bundle install
rbenv rehash
</code></pre>
<p>which will install all the gems we need and the command line tools. We
can now use Jekyll to create all the basic files needed for the site.
Assuming you&rsquo;re currect directory is your site directory:</p>
<pre><code>jekyll new .
</code></pre>
<p>should create all the needed files. You can then test things out with</p>
<pre><code>jekyll serve
</code></pre>
<p>which creates a webserver on port 4000 serving up your site. Once you&rsquo;re
happy, you can now commit your changes, push them to Github and see your
new, Jekyll powered sites 🎉</p>
]]></content><category scheme="https://www.iocaine.org/tags/development" term="development" label="development"/><category scheme="https://www.iocaine.org/tags/ruby" term="ruby" label="ruby"/><category scheme="https://www.iocaine.org/tags/rbenv" term="rbenv" label="rbenv"/><category scheme="https://www.iocaine.org/tags/osx" term="osx" label="osx"/><category scheme="https://www.iocaine.org/tags/jekyll" term="jekyll" label="jekyll"/><category scheme="https://www.iocaine.org/tags/homebrew" term="homebrew" label="homebrew"/></entry></feed>